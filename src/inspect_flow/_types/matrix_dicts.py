# generated by type_gen.py (using datamodel-codegen)

from typing import Any, Literal, Mapping, Optional, Sequence, TypedDict, Union

from inspect_ai.approval._policy import ApprovalPolicyConfig, ApproverPolicyConfig
from inspect_ai.model import BatchConfig, GenerateConfig, ResponseSchema
from inspect_ai.util import JSONSchema, SandboxEnvironmentSpec
from typing_extensions import NotRequired

from inspect_flow._types.flow_types import (
    FlowAgent,
    FlowEpochs,
    FlowModel,
    FlowOptions,
    FlowSolver,
    FlowTask,
)


class ApproverPolicyConfigMatrixDict(TypedDict):
    name: NotRequired[Optional[Sequence[str]]]
    tools: NotRequired[Optional[Sequence[Union[str, Sequence[str]]]]]
    params: NotRequired[Optional[Sequence[Mapping[str, Any]]]]


class BatchConfigMatrixDict(TypedDict):
    size: NotRequired[Optional[Sequence[int]]]
    max_size: NotRequired[Optional[Sequence[int]]]
    send_delay: NotRequired[Optional[Sequence[float]]]
    tick: NotRequired[Optional[Sequence[float]]]
    max_batches: NotRequired[Optional[Sequence[int]]]
    max_consecutive_check_failures: NotRequired[Optional[Sequence[int]]]


class FlowAgentMatrixDict(TypedDict):
    name: NotRequired[Optional[Sequence[str]]]
    args: NotRequired[Optional[Sequence[Mapping[str, Any]]]]


class FlowEpochsMatrixDict(TypedDict):
    epochs: NotRequired[Optional[Sequence[int]]]
    reducer: NotRequired[Optional[Sequence[Union[str, Sequence[str]]]]]


class FlowSolverMatrixDict(TypedDict):
    name: NotRequired[Optional[Sequence[str]]]
    args: NotRequired[Optional[Sequence[Mapping[str, Any]]]]


class JSONSchemaMatrixDict(TypedDict):
    type: NotRequired[
        Optional[
            Sequence[
                Literal[
                    "string", "integer", "number", "boolean", "array", "object", "null"
                ]
            ]
        ]
    ]
    format: NotRequired[Optional[Sequence[str]]]
    description: NotRequired[Optional[Sequence[str]]]
    default: NotRequired[Optional[Sequence]]
    enum: NotRequired[Optional[Sequence[Sequence]]]
    items: NotRequired[Optional[Sequence[Union[JSONSchema, "JSONSchemaMatrixDict"]]]]
    properties: NotRequired[
        Optional[Sequence[Mapping[str, Union[JSONSchema, "JSONSchemaMatrixDict"]]]]
    ]
    additionalProperties: NotRequired[
        Optional[Sequence[Union[Union[JSONSchema, "JSONSchemaMatrixDict"], bool]]]
    ]
    anyOf: NotRequired[
        Optional[Sequence[Sequence[Union[JSONSchema, "JSONSchemaMatrixDict"]]]]
    ]
    required: NotRequired[Optional[Sequence[Sequence[str]]]]


class ResponseSchemaMatrixDict(TypedDict):
    name: NotRequired[Optional[Sequence[str]]]
    json_schema: NotRequired[Union[JSONSchema, "JSONSchemaMatrixDict"]]
    description: NotRequired[Optional[Sequence[str]]]
    strict: NotRequired[Optional[Sequence[bool]]]


class SandboxEnvironmentSpecMatrixDict(TypedDict):
    type: NotRequired[Optional[Sequence[str]]]
    config: NotRequired[Optional[Sequence]]


class ApprovalPolicyConfigMatrixDict(TypedDict):
    approvers: NotRequired[
        Optional[
            Sequence[
                Sequence[Union[ApproverPolicyConfig, "ApproverPolicyConfigMatrixDict"]]
            ]
        ]
    ]


class FlowOptionsMatrixDict(TypedDict):
    retry_attempts: NotRequired[Optional[Sequence[int]]]
    retry_wait: NotRequired[Optional[Sequence[float]]]
    retry_connections: NotRequired[Optional[Sequence[float]]]
    retry_cleanup: NotRequired[Optional[Sequence[bool]]]
    sandbox: NotRequired[
        Optional[
            Sequence[
                Union[
                    str,
                    Sequence,
                    Union[SandboxEnvironmentSpec, "SandboxEnvironmentSpecMatrixDict"],
                ]
            ]
        ]
    ]
    sandbox_cleanup: NotRequired[Optional[Sequence[bool]]]
    tags: NotRequired[Optional[Sequence[Sequence[str]]]]
    metadata: NotRequired[Optional[Sequence[Mapping[str, Any]]]]
    trace: NotRequired[Optional[Sequence[bool]]]
    display: NotRequired[
        Optional[
            Sequence[Literal["full", "conversation", "rich", "plain", "log", "none"]]
        ]
    ]
    approval: NotRequired[
        Optional[
            Sequence[
                Union[
                    str, Union[ApprovalPolicyConfig, "ApprovalPolicyConfigMatrixDict"]
                ]
            ]
        ]
    ]
    score: NotRequired[Optional[Sequence[bool]]]
    log_level: NotRequired[Optional[Sequence[str]]]
    log_level_transcript: NotRequired[Optional[Sequence[str]]]
    log_format: NotRequired[Optional[Sequence[Literal["eval", "json"]]]]
    limit: NotRequired[Optional[Sequence[int]]]
    sample_shuffle: NotRequired[Optional[Sequence[Union[bool, int]]]]
    fail_on_error: NotRequired[Optional[Sequence[Union[bool, float]]]]
    continue_on_fail: NotRequired[Optional[Sequence[bool]]]
    retry_on_error: NotRequired[Optional[Sequence[int]]]
    debug_errors: NotRequired[Optional[Sequence[bool]]]
    max_samples: NotRequired[Optional[Sequence[int]]]
    max_tasks: NotRequired[Optional[Sequence[int]]]
    max_subprocesses: NotRequired[Optional[Sequence[int]]]
    max_sandboxes: NotRequired[Optional[Sequence[int]]]
    log_samples: NotRequired[Optional[Sequence[bool]]]
    log_realtime: NotRequired[Optional[Sequence[bool]]]
    log_images: NotRequired[Optional[Sequence[bool]]]
    log_buffer: NotRequired[Optional[Sequence[int]]]
    log_shared: NotRequired[Optional[Sequence[Union[bool, int]]]]
    log_dir_allow_dirty: NotRequired[Optional[Sequence[bool]]]


class GenerateConfigMatrixDict(TypedDict):
    max_retries: NotRequired[Optional[Sequence[int]]]
    timeout: NotRequired[Optional[Sequence[int]]]
    attempt_timeout: NotRequired[Optional[Sequence[int]]]
    max_connections: NotRequired[Optional[Sequence[int]]]
    system_message: NotRequired[Optional[Sequence[str]]]
    max_tokens: NotRequired[Optional[Sequence[int]]]
    top_p: NotRequired[Optional[Sequence[float]]]
    temperature: NotRequired[Optional[Sequence[float]]]
    stop_seqs: NotRequired[Optional[Sequence[Sequence[str]]]]
    best_of: NotRequired[Optional[Sequence[int]]]
    frequency_penalty: NotRequired[Optional[Sequence[float]]]
    presence_penalty: NotRequired[Optional[Sequence[float]]]
    logit_bias: NotRequired[Optional[Sequence[Mapping[str, float]]]]
    seed: NotRequired[Optional[Sequence[int]]]
    top_k: NotRequired[Optional[Sequence[int]]]
    num_choices: NotRequired[Optional[Sequence[int]]]
    logprobs: NotRequired[Optional[Sequence[bool]]]
    top_logprobs: NotRequired[Optional[Sequence[int]]]
    parallel_tool_calls: NotRequired[Optional[Sequence[bool]]]
    internal_tools: NotRequired[Optional[Sequence[bool]]]
    max_tool_output: NotRequired[Optional[Sequence[int]]]
    cache_prompt: NotRequired[Optional[Sequence[Union[str, bool]]]]
    reasoning_effort: NotRequired[
        Optional[Sequence[Literal["minimal", "low", "medium", "high"]]]
    ]
    reasoning_tokens: NotRequired[Optional[Sequence[int]]]
    reasoning_summary: NotRequired[
        Optional[Sequence[Literal["concise", "detailed", "auto"]]]
    ]
    reasoning_history: NotRequired[
        Optional[Sequence[Literal["none", "all", "last", "auto"]]]
    ]
    response_schema: NotRequired[
        Optional[Sequence[Union[ResponseSchema, "ResponseSchemaMatrixDict"]]]
    ]
    extra_body: NotRequired[Optional[Sequence[Mapping[str, Any]]]]
    batch: NotRequired[
        Optional[
            Sequence[Union[bool, int, Union[BatchConfig, "BatchConfigMatrixDict"]]]
        ]
    ]


class FlowModelMatrixDict(TypedDict):
    name: NotRequired[Optional[Sequence[str]]]
    role: NotRequired[Optional[Sequence[str]]]
    default: NotRequired[Optional[Sequence[str]]]
    config: NotRequired[
        Optional[Sequence[Union[GenerateConfig, "GenerateConfigMatrixDict"]]]
    ]
    base_url: NotRequired[Optional[Sequence[str]]]
    api_key: NotRequired[Optional[Sequence[str]]]
    memoize: NotRequired[Optional[Sequence[bool]]]
    model_args: NotRequired[Optional[Sequence[Mapping[str, Any]]]]


class FlowTaskMatrixDict(TypedDict):
    name: NotRequired[Optional[Sequence[str]]]
    file: NotRequired[Optional[Sequence[str]]]
    file_attr: NotRequired[Optional[Sequence[str]]]
    registry_name: NotRequired[Optional[Sequence[str]]]
    args: NotRequired[Optional[Sequence[Mapping[str, Any]]]]
    solver: NotRequired[
        Optional[
            Sequence[
                Union[
                    Union[str, FlowSolver, FlowSolverMatrixDict],
                    Sequence[Union[str, FlowSolver, FlowSolverMatrixDict]],
                    Union[FlowAgent, "FlowAgentMatrixDict"],
                ]
            ]
        ]
    ]
    model: NotRequired[Optional[Sequence[Union[str, FlowModel, FlowModelMatrixDict]]]]
    config: NotRequired[
        Optional[Sequence[Union[GenerateConfig, "GenerateConfigMatrixDict"]]]
    ]
    model_roles: NotRequired[
        Optional[
            Sequence[
                Mapping[str, Union[Union[str, FlowModel, FlowModelMatrixDict], str]]
            ]
        ]
    ]
    sandbox: NotRequired[
        Optional[
            Sequence[
                Union[
                    str,
                    Sequence,
                    Union[SandboxEnvironmentSpec, "SandboxEnvironmentSpecMatrixDict"],
                ]
            ]
        ]
    ]
    approval: NotRequired[
        Optional[
            Sequence[
                Union[
                    str, Union[ApprovalPolicyConfig, "ApprovalPolicyConfigMatrixDict"]
                ]
            ]
        ]
    ]
    epochs: NotRequired[
        Optional[Sequence[Union[int, Union[FlowEpochs, "FlowEpochsMatrixDict"]]]]
    ]
    fail_on_error: NotRequired[Optional[Sequence[Union[bool, float]]]]
    continue_on_fail: NotRequired[Optional[Sequence[bool]]]
    message_limit: NotRequired[Optional[Sequence[int]]]
    token_limit: NotRequired[Optional[Sequence[int]]]
    time_limit: NotRequired[Optional[Sequence[int]]]
    working_limit: NotRequired[Optional[Sequence[int]]]
    version: NotRequired[Optional[Sequence[int]]]
    metadata: NotRequired[Optional[Sequence[Mapping[str, Any]]]]
    sample_id: NotRequired[
        Optional[Sequence[Union[str, int, Sequence[Union[str, int]]]]]
    ]


class FlowConfigMatrixDict(TypedDict):
    flow_dir: NotRequired[Optional[Sequence[str]]]
    python_version: NotRequired[Optional[Sequence[str]]]
    options: NotRequired[
        Optional[Sequence[Union[FlowOptions, "FlowOptionsMatrixDict"]]]
    ]
    config: NotRequired[
        Optional[Sequence[Union[GenerateConfig, "GenerateConfigMatrixDict"]]]
    ]
    dependencies: NotRequired[Optional[Sequence[Sequence[str]]]]
    tasks: NotRequired[
        Optional[Sequence[Sequence[Union[str, FlowTask, FlowTaskMatrixDict]]]]
    ]
    env: NotRequired[Optional[Sequence[Mapping[str, str]]]]
