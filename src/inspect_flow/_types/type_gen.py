import re
import subprocess
import tempfile
from pathlib import Path
from typing import Any, Literal, TypeAlias

from datamodel_code_generator import DataModelType, InputFileType, generate

from inspect_flow._types.flow_types import FlowConfig

GenType = Literal["Dict", "MatrixDict"]

# TODO:ransom private import
ADDITIONAL_IMPORTS = [
    "from inspect_ai.model import BatchConfig, GenerateConfig, ResponseSchema\n",
    "from inspect_ai.util import JSONSchema, SandboxEnvironmentSpec\n",
    "from inspect_ai.approval._policy import ApprovalPolicyConfig, ApproverPolicyConfig\n",
    "from inspect_flow._types.flow_types import FlowAgent, FlowEpochs, FlowOptions, FlowModel, FlowSolver, FlowTask\n",
]

Schema: TypeAlias = dict[str, Any]


def remove_none_option(any_of: list[Schema]) -> list[Schema]:
    return [v for v in any_of if v.get("type") != "null"]


def field_type_to_list(field_schema: Schema) -> None:
    field_type: Schema
    if "type" in field_schema:
        type = field_schema["type"]
        if type == "array":
            field_type = {"type": type, "items": field_schema["items"]}
            del field_schema["items"]
        else:
            field_type = {"type": type}
        del field_schema["type"]
    elif "anyOf" in field_schema:
        any_of: list[Schema] = field_schema["anyOf"]
        del field_schema["anyOf"]
        any_of = remove_none_option(any_of)
        field_type = {"anyOf": any_of}
    else:
        # Any type
        field_type = {}

    field_schema["anyOf"] = [{"type": "array", "items": field_type}, {"type": "null"}]
    if "default" not in field_schema:
        field_schema["default"] = None


def fields_to_lists(schema: Schema) -> Schema:
    defs: Schema = schema["$defs"]
    classes: list[Schema] = [schema, *[v for v in defs.values()]]
    for c in classes:
        properties: Schema = c["properties"]
        c.pop("required", None)
        for field_value in properties.values():
            field_type_to_list(field_value)
    return schema


def generate_dict_code(type: GenType) -> list[str]:
    with tempfile.NamedTemporaryFile(mode="w+", suffix=".py") as tmp_file:
        generated_type_file = Path(tmp_file.name)

        # schema = transform_schema(FlowConfig.model_json_schema())
        schema = FlowConfig.model_json_schema()
        if type == "MatrixDict":
            schema = fields_to_lists(schema)

        generate(
            str(schema),
            input_file_type=InputFileType.JsonSchema,
            output=generated_type_file,
            output_model_type=DataModelType.TypingTypedDict,
            custom_class_name_generator=lambda name: f"{name}{type}",
            use_generic_container_types=True,
        )

        with open(generated_type_file, "r") as f:
            lines = f.readlines()
    return lines


def modify_generated_code(type: GenType, lines: list[str]) -> list[str]:
    str_as_class = ["FlowTask", "FlowModel", "FlowSolver"]

    def replacement(m: re.Match[str]) -> str:
        if m.group(1) in str_as_class:
            return f"Union[str, {m.group(1)}, {m.group(0)}]"
        else:
            return f'Union[{m.group(1)}, "{m.group(0)}"]'

    generated_code: list[str] = [
        "# generated by type_gen.py (using datamodel-codegen)\n",
        "\n",
    ]
    section = "comment"
    for line in lines:
        if section == "comment":
            if line.strip().startswith("from"):
                section = "imports"
                generated_code.extend(ADDITIONAL_IMPORTS)
        elif section == "imports":
            generated_code.append(line)
            if line.strip().startswith("class"):
                section = "classes"
        elif section == "classes":
            if line.strip().startswith("class"):
                # Don't modify import or class definition lines
                generated_code.append(line)
            else:
                # Replace ClassNameDict with ClassName | ClassNameDict
                modified_line = re.sub(
                    rf"\b(\w+){type}\b",
                    replacement,
                    line,
                )
                generated_code.append(modified_line)
    return generated_code


def write_generated_code(file_name: str, generated_code: list[str]) -> None:
    output_file = Path(__file__).parent / file_name

    with open(output_file, "w") as f:
        f.writelines(generated_code)
    subprocess.run(["ruff", "check", "--fix", str(output_file)], check=True)
    subprocess.run(["ruff", "format", str(output_file)], check=True)


def main():
    lines = generate_dict_code("Dict")
    generated_code = modify_generated_code("Dict", lines)
    write_generated_code("dicts.py", generated_code)
    lines = generate_dict_code("MatrixDict")
    generated_code = modify_generated_code("MatrixDict", lines)
    write_generated_code("matrix_dicts.py", generated_code)


if __name__ == "__main__":
    main()
